<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.2.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/task     
                        http://www.springframework.org/schema/task/spring-task-3.1.xsd"
						>
	<context:annotation-config/><!-- 配置事物起作用 -->
	<!-- <bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />   -->
	<task:annotation-driven/> 
	<context:component-scan base-package="com.cyb.web">
	   <!-- 父容器  不扫描子容器controller -->
	   <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan> 
	<mvc:annotation-driven/> 
	<!-- c3po连接池配置 -->
	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:db-test.properties</value>  
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
              <value>classpath:mail.properties</value>    
            </list>  
        </property>  
    </bean>  
	<!-- <bean id="refProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="locations">
	        <list>
	            <value>classpath:db-test.properties</value>
	            <value>classpath:mail.properties</value>
	        </list>
	    </property>
	</bean> -->
	  <context:property-placeholder location="classpath:db-test.properties,classpath:mail.properties" 
	     ignore-unresolvable="true"	
	     system-properties-mode="OVERRIDE"
	     order="2" /> 
	<!--  <beans profile="dev">
	      <context:property-placeholder location="classpath:db-dev.properties"/>
	 </beans>
	  <beans profile="test">
	      <context:property-placeholder location="classpath:db-test.properties"/>
	 </beans>
	  <beans profile="pro">
	      <context:property-placeholder location="classpath:db-pro.properties"/>
	 </beans> -->
    <!-- <context:property-placeholder location="classpath:db-{environmental}.properties"/> -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	      <property name="driverClassName" value="${connection.mysql.driverclassname}" />      
	      <property name="url" value="${connection.mysql.url}" />
	      <property name="username" value="${hibernate.connection.username}" />
	      <property name="password" value="${hibernate.connection.password}" />
	      <property name="initialSize" value="1" />
	      <property name="minIdle" value="1" /> 
	      <property name="maxActive" value="20" />
	      <property name="maxWait" value="60000" />
	      <property name="timeBetweenEvictionRunsMillis" value="60000" />
	      <property name="minEvictableIdleTimeMillis" value="300000" />
	      <property name="validationQuery" value="SELECT 1+1 from dual" />
	      <property name="testWhileIdle" value="true" />
	      <property name="testOnBorrow" value="false" />
	      <property name="testOnReturn" value="false" />
	      <property name="poolPreparedStatements" value="true" />
	      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	      <property name="filters" value="stat" />
	</bean>  
	<!-- 配置Session Factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">     
	      <props>
	      	<prop key="hibernate.dialect">${hibernate.mysql.dialect}</prop>
	      	<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
	      	<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>                    
	        <prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
	        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbmddl}</prop> 
	        <!--  <prop key="hibernate.connection.autocommit">true</prop> -->
	        <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
	        <prop key="generate_statistics">true</prop>
	        <prop key="hibernate.jdbc.batch_size">100</prop> 
	        <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
	        <prop key="hibernate.cache.use_second_level_cache">true</prop>
	        <prop key="hibernate.cache.use_structured_entries">true</prop>
	        <prop key="hibernate.cache.use_query_cache">true</prop>
	        <prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache_hibernate.xml</prop>	       
	      </props>
      </property>
		<property name="packagesToScan">
		 <!--  <list> 
                <value>com.cyb.web.xtgl.po</value> 
                <value>com.cyb.web.xzzx.po</value> 
                <value>com.cyb.web.sw.po</value> 
                <value>com.cyb.web.xss.po</value> 
                <value>com.cyb.web.model.po</value> 
          </list>  -->
          <list>
          	<value>com.cyb.web..*</value>
          	<value>com.cyb.web.model.po</value> 
          	<value>com.cyb.web.*.po</value> 
          	<!-- <value>com.cyb.po.Db2Bean</value>  -->
          </list>
          
        </property> 
        <property name="mappingDirectoryLocations">
            <list>
                <value>
                    /com/cyb/po/Db2*.java 
                </value>
               <!--包下包含po和对应的hbm文件 如 xxxx.java,则xxxx.hbm.xml  
               <value>classpath:/com/cyb/po/</value> -->
            </list>
         </property>
         <!-- 仅仅配置hbm文件 -->
	     <property name="mappingResources">
	        <list>
	            <value>/com/cyb/po/Db2Bean.hbm.xml</value> 
	        </list>
	    </property>
	</bean>		
	    <!-- 开启AOP监听 只对当前配置文件有效 -->
        <aop:aspectj-autoproxy expose-proxy="true"/>

        <!-- 开启注解事务 只对当前配置文件有效 
        <tx:annotation-driven transaction-manager="txManager" />
        -->
        <bean id="txManager"
                class="org.springframework.orm.hibernate4.HibernateTransactionManager">
                <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <tx:advice id="txAdvice" transaction-manager="txManager">
                <tx:attributes>
                        <tx:method name="save*" propagation="REQUIRED" />
                        <tx:method name="add*" propagation="REQUIRED" />
                        <tx:method name="create*" propagation="REQUIRED" />
                        <tx:method name="insert*" propagation="REQUIRED" />
                        <tx:method name="update*" propagation="REQUIRED" />
                        <tx:method name="merge*" propagation="REQUIRED" />
                        <tx:method name="del*" propagation="REQUIRED" />
                        <tx:method name="remove*" propagation="REQUIRED" />
                        <tx:method name="put*" propagation="REQUIRED" />
                        <tx:method name="use*" propagation="REQUIRED" />
                        <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
                        <tx:method name="get*" propagation="REQUIRED" read-only="true" />
                        <tx:method name="count*" propagation="REQUIRED" read-only="true" />
                        <tx:method name="find*" propagation="REQUIRED" read-only="true" />
                        <tx:method name="list*" propagation="REQUIRED" read-only="true" />
                        <tx:method name="*" read-only="true" />
                </tx:attributes>
        </tx:advice>
        <aop:config expose-proxy="true">
                <!-- 只对业务逻辑层实施事务 -->
                <aop:pointcut id="txPointcut"
                        expression="execution(* com.cyb.web..service..*(..))" />
                <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
        </aop:config>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		     <property name="dataSource">
		         <ref bean="dataSource" />
		     </property>
     	</bean>
     	 <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		     <constructor-arg ref="dataSource"></constructor-arg>
     	</bean>
     	<bean id="myUserDetailServiceImpl" class="com.cyb.security.MyUserDetailServiceImpl"/>
		
		<!-- <beans profile="test">
         <context:property-placeholder ignore-resource-not-found="true"
            location="classpath*:/application.properties,
                      classpath*:/application.test.properties" />   -->
		<!-- 初始化数据表结构 -->
      <!--   <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
            <jdbc:script location="classpath:sql/h2/schema.sql" />
            <jdbc:script location="classpath:data/h2/import-data.sql" encoding="UTF-8"/>
        </jdbc:initialize-database> -->
</beans>